"""
h. Host Exploit Detection Stats represented as a stacked bar graph 
    using the ViolationType column as the different stacked bars, status column as the quarantined trend, and Action column as the blocked trend, 
    all from host_exploit_threat_stats_complete.csv
fix: add both scatter plots to show the trends in Status and Action
     add all violation types
"""

import pandas
import plotly.graph_objects as go
import plotly.subplots as sp
import numpy as np

def build(host_exploit):
    # Sum all counts for a given month
    sum_action = host_exploit.groupby(['time', 'ViolationType'], as_index=False, dropna=False)['count'].sum()
    # print(sum_action)

    # Move all required columns into a single DF and calculate any derived information
    cols = pandas.DataFrame()
    cols["date"] = sum_action['time']

    cols["LSASS_Read"] = sum_action[sum_action['ViolationType']=="LSASS Read"]['count']
    cols["Remote_Thread_Creation"] = sum_action[sum_action['ViolationType']=="Remote Thread Creation"]['count']
    cols["Stack_Pivot"] = sum_action[sum_action['ViolationType']=="Stack Pivot"]['count']
    cols["Remote_Write"] = sum_action[sum_action['ViolationType']=="Remote Write PE to Memory"]['count']
    cols["Remote_APC"] = sum_action[sum_action['ViolationType']=="Remote APC Schedule"]['count']

    data = {"date":[], "LSASS_Read":[], "Remote_Thread_Creation":[], "Stack_Pivot":[], "Remote_Write":[], "Remote_APC":[]}
    for _, group in cols.groupby('date'):
        vals = group.values
        data['date'].append(vals[0][0])
        data['LSASS_Read'].append(vals[0][1])
        data['Remote_Thread_Creation'].append(vals[1][2])
        data['Stack_Pivot'].append(vals[2][3])
        data['Remote_Write'].append(vals[3][4])
        data['Remote_APC'].append(vals[4][5])
    cols = pandas.DataFrame(data)

    # fix scatter plot to show trend in Status
    #cols["Status_ct"] = sum_action[sum_action['Status']=="Cleared"]['count']

    # Create all subplots for the first graph
    figlist = [
        go.Bar(
            name="LSASS Read",
            x=cols['date'],
            y=cols['LSASS_Read'],
            marker_color="SkyBlue"
        ),
        go.Bar(
            name="Remote Thread Creation",
            x=cols['date'],
            y=cols['Remote_Thread_Creation'],
            marker_color="SteelBlue"
        ),
        go.Bar(
            name="Stack Pivot",
            x=cols['date'],
            y=cols['Stack_Pivot'],
            marker_color="SteelBlue"
        ),
        go.Bar(
            name="Remote Write PE to Memory",
            x=cols['date'],
            y=cols['Remote_Write'],
            marker_color="Blue"
        ),
        go.Bar(
            name="Remote APC Schedule",
            x=cols['date'],
            y=cols['Remote_APC'],
            marker_color="Turquoise"
        ),
        # go.Scatter(
        #     name="Status",
        #     x=cols['date'],
        #     y=cols["Status_ct"],
        #     marker_color="CornflowerBlue"
        # )
        # Add a second scatter plot
    ]

    layout= {
        'title': 'Host Exploit Detection Status',
        'xaxis_title': 'Dates',
        'yaxis_title': 'Count',
        'barmode': 'stack'
    }

    # Overlap all the subplots onto one plot
    # fig = sp.make_subplots(specs=[[{"secondary_y": True}]])
    # fig.add_trace(figlist[0], secondary_y=False)
    # fig.add_trace(figlist[1], secondary_y=False)
    # fig.add_trace(figlist[2], secondary_y=False)
    # fig.add_trace(figlist[3], secondary_y=False)
    # fig.add_trace(figlist[4], secondary_y=False)
    
    # # Apply formatting
    # fig.update_layout(
    #     title = 'Host Exploit Detection Status',
    #     xaxis_title = 'Dates',
    #     yaxis_title = 'Count',
    #     barmode='stack'
    # )
    return figlist, layout