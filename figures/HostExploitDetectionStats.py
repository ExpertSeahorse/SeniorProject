"""
h. Host Exploit Detection Stats represented as a stacked bar graph 
    using the ViolationType column as the different stacked bars, status column as the quarantined trend, and Action column as the blocked trend, 
    all from host_exploit_threat_stats_complete.csv
fix: add both scatter plots to show the trends in Status and Action
     add all violation types
"""

import pandas
import plotly.graph_objects as go
import numpy as np
import math
import random

def build(host_exploit):
    # Sum all counts by violation type for a given month and collect all unique violation types
    violations = host_exploit.groupby(['time', 'ViolationType'], as_index=False, dropna=False)['count'].sum()
    threat_types = violations['ViolationType'].unique()

    # Move total count for a violation type into a row correlating the month and total
    # Results in a one-hot table of values
    cols = pandas.DataFrame()
    cols["date"] = violations['time']
    data = {"date":[]}
    for threat_type in threat_types:
        if type(threat_type) == float:
            cols["N/A"] = violations[violations['ViolationType'].isnull()]['count']
            data["N/A"] = []
        else:
            data[threat_type] = []
            cols[threat_type] = violations[violations['ViolationType']==threat_type]['count']

    # Consolidate all sums for a month into a single row in a DF
    for date, group in cols.groupby('date'):
        data['date'].append(date)
        vals = group.values
        for row in vals:
            for i in range(1, len(row)):
                val = row[i]
                if not math.isnan(val):
                    col = threat_types[i-1]
                    if type(col) != float:
                        data[col].append(val)
                    else:
                        data['N/A'].append(val)
        for key in data.keys():
            if len(data[key]) != len(data['date']):
                data[key].append(np.nan)
            
    cols = pandas.DataFrame(data)

    # Build the list of Bar graphs
    figlist = []
    for threat_type in threat_types:
        if type(threat_type) == float:
            threat_type = "N/A"
        figlist.append(go.Bar(
            name=threat_type,
            x=cols['date'],
            y=cols[threat_type],
            marker_color=f"rgb({random.randint(0,255)}, {random.randint(0,255)}, {random.randint(0,255)})"
        ))

    # Add quarantined trendline
    quarantined = host_exploit.groupby(['time', 'Status'], as_index=False, dropna=False)['count'].count()
    quart_total = host_exploit.groupby(['time'], as_index=False)['count'].count()

    # Make table for graph
    cols = pandas.DataFrame()
    cols["time"] = quarantined['time']
    cols["quart"] = quarantined[quarantined['Status']=="Quarantined"]['count']
    cols = cols.dropna()
    cols = cols.merge(right=quart_total, on="time")

    figlist.append(go.Scatter(
        name="Avg Quarantined",
        x=cols['time'],
        y=cols["quart"]/cols['count'],
        marker_color="Chartreuse"
    ))

    # Add blocked trendline
    blocked = host_exploit.groupby(['time', 'Action'], as_index=False, dropna=False)['count'].count()
    b_total = host_exploit.groupby(['time'], as_index=False)['count'].count()

    # Make table for graph
    cols = pandas.DataFrame()
    cols["time"] = blocked['time']
    cols["blocked"] = blocked[blocked['Action']=="Blocked"]['count']
    cols = cols.dropna()
    cols = cols.merge(right=quart_total, on="time")
    print(cols)

    figlist.append(go.Scatter(
        name="Avg Blocked",
        x=cols['time'],
        y=cols["blocked"]/cols['count'],
        marker_color="Red"
    ))

    layout= {
        'title': 'Host Exploit Detection Status',
        'xaxis_title': 'Dates',
        'yaxis_title': 'Count',
        'y2axis_title': 'Percent',
        'secondary_y': len(threat_types)*[False] + [True, True]
    }

    return figlist, layout