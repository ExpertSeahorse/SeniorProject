"""
h. Host Exploit Detection Stats represented as a stacked bar graph 
    using the ViolationType column as the different stacked bars, status column as the quarantined trend, and Action column as the blocked trend, 
    all from host_exploit_threat_stats_complete.csv
fix: add both scatter plots to show the trends in Status and Action
     add all violation types
"""

import pandas
import plotly.graph_objects as go
import plotly.subplots as sp
import numpy as np
import math
import random

def build(host_exploit):
    # Sum all counts for a given month
    violations = host_exploit.groupby(['time', 'ViolationType'], as_index=False, dropna=False)['count'].sum()
    threat_types = violations['ViolationType'].unique()

    # Move all required columns into a single DF and calculate any derived information
    cols = pandas.DataFrame()
    cols["date"] = violations['time']
    data = {"date":[]}
    for threat_type in threat_types:
        if type(threat_type) == float:
            cols["N/A"] = violations[violations['ViolationType'].isnull()]['count']
            data["N/A"] = []
        else:
            data[threat_type] = []
            cols[threat_type] = violations[violations['ViolationType']==threat_type]['count']

    # print(cols.to_string())
    for date, group in cols.groupby('date'):
        data['date'].append(date)
        vals = group.values
        # print(vals)
        for row in vals:
            for i in range(1, len(row)):
                val = row[i]
                if not math.isnan(val):
                    # print(i)
                    col = threat_types[i-1]
                    if type(col) != float:
                        data[col].append(val)
                    else:
                        data['N/A'].append(val)
        for key in data.keys():
            if len(data[key]) != len(data['date']):
                data[key].append(np.nan)
        # print([(k, len(x)) for k, x in data.items()])
            
    # [print(k, len(x)) for k, x in data.items()]
    cols = pandas.DataFrame(data)
    print(cols)
    # fix scatter plot to show trend in Status
    #cols["Status_ct"] = violations[violations['Status']=="Cleared"]['count']

    figlist = []
    for threat_type in threat_types:
        if type(threat_type) == float:
            threat_type = "N/A"
        figlist.append(go.Bar(
            name=threat_type,
            x=cols['date'],
            y=cols[threat_type],
            marker_color=f"rgb({random.randint(0,255)}, {random.randint(0,255)}, {random.randint(0,255)})"
        ))

    layout= {
        'title': 'Host Exploit Detection Status',
        'xaxis_title': 'Dates',
        'yaxis_title': 'Count',
    }

    # Overlap all the subplots onto one plot
    # fig = sp.make_subplots(specs=[[{"secondary_y": True}]])
    # fig.add_trace(figlist[0], secondary_y=False)
    # fig.add_trace(figlist[1], secondary_y=False)
    # fig.add_trace(figlist[2], secondary_y=False)
    # fig.add_trace(figlist[3], secondary_y=False)
    # fig.add_trace(figlist[4], secondary_y=False)
    
    # # Apply formatting
    # fig.update_layout(
    #     title = 'Host Exploit Detection Status',
    #     xaxis_title = 'Dates',
    #     yaxis_title = 'Count',
    #     barmode='stack'
    # )
    return figlist, layout